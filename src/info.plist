<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>bundleid</key>
	<string>com.apple.alfred.workflow.rsync</string>
	<key>category</key>
	<string>Tools</string>
	<key>connections</key>
	<dict>
		<key>0B1EEDE7-0E14-4E4D-946B-0A080FD90ABA</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>8EDB9386-2EB1-47FB-8905-FD1B868A2066</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>18A8BEB2-76E9-4C6B-9F76-B7C0952A20C3</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>0B1EEDE7-0E14-4E4D-946B-0A080FD90ABA</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>466C9EDE-75DE-4BD9-9871-984499110A39</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>7237410C-BEE0-45EC-9AA1-1FFDBB456611</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>7237410C-BEE0-45EC-9AA1-1FFDBB456611</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>18A8BEB2-76E9-4C6B-9F76-B7C0952A20C3</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
	</dict>
	<key>createdby</key>
	<string>Acidham</string>
	<key>description</key>
	<string>RSync two folders from a list</string>
	<key>disabled</key>
	<false/>
	<key>name</key>
	<string>RSync Folders</string>
	<key>objects</key>
	<array>
		<dict>
			<key>config</key>
			<dict>
				<key>largetypetext</key>
				<string>{query}</string>
			</dict>
			<key>type</key>
			<string>alfred.workflow.output.largetype</string>
			<key>uid</key>
			<string>8EDB9386-2EB1-47FB-8905-FD1B868A2066</string>
			<key>version</key>
			<integer>2</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>alfredfiltersresults</key>
				<true/>
				<key>alfredfiltersresultsmatchmode</key>
				<integer>0</integer>
				<key>argumenttrimmode</key>
				<integer>0</integer>
				<key>argumenttype</key>
				<integer>1</integer>
				<key>escaping</key>
				<integer>68</integer>
				<key>keyword</key>
				<string>rsync</string>
				<key>queuedelaycustom</key>
				<integer>3</integer>
				<key>queuedelayimmediatelyinitially</key>
				<true/>
				<key>queuedelaymode</key>
				<integer>0</integer>
				<key>queuemode</key>
				<integer>1</integer>
				<key>runningsubtext</key>
				<string></string>
				<key>script</key>
				<string>on run argv	-- Load json File	-- https://github.com/KAYLukas/applescript-json	set theJsonPath to POSIX file ((do shell script "pwd") &amp; "/json.scpt")	set json to load script theJsonPath as alias		-- get data directory and file	do shell script "mkdir -p \"${alfred_workflow_data}\""	set theDataDir to POSIX file (do shell script "echo $alfred_workflow_data")	set theDataFile to theDataDir &amp; ":rsync.txt" as text		-- Clean text read from rsync.txt	set theRawData to {}	try		set theRawData to paragraphs of (read file theDataFile)	on error		log "file empty"	end try		-- read rsync.txt content into theData list	set theData to {}	repeat with theLine in theRawData		if (theLine as text) contains "|" then			set theData to theData &amp; theLine		end if	end repeat		-- Create Script filter output object	set theItems to {}		-- Create Execute all entry in Script Filter list	set theItem to json's createDictWith({{"title", "Execute all"}})	theItem's setkv("subtitle", "Execute Rsync")	theItem's setkv("arg", "exec|0")	theItem's setkv("quicklookurl", "")		-- create image for execute command	set theIcon to json's createDictWith({{"type", "image"}})	theIcon's setkv("path", "execute.png")	theItem's setkv("icon", theIcon)		-- add to script filter list	set end of theItems to theItem		-- Add item by browsing folders	set theItem to json's createDictWith({{"title", "New Entry"}})	theItem's setkv("subtitle", "Add new rsync config by browsing folders")	theItem's setkv("arg", "add|0")	theItem's setkv("quicklookurl", "")	-- CMD for adding folder with text entry field	set theTextField to json's createDictWith({{"valid", "true"}})	theTextField's setkv("arg", "add|1")	theTextField's setkv("subtitle", "Add rsync config with adding paths")		set theMod to json's createDictWith({{"cmd", theTextField}})		theItem's setkv("mods", theMod)		set theIcon to json's createDictWith({{"type", "image"}})	theIcon's setkv("path", "add.png")	theItem's setkv("icon", theIcon)		-- Create item for delete item	set end of theItems to theItem	if (count of theData) is greater than 0 then		repeat with theLine in theData			set theDataSet to StringSplit(theLine, "|")			set theID to item 1 of theDataSet			set theName to item 2 of theDataSet			set theSource to item 3 of theDataSet			set theTarget to item 4 of theDataSet						set theItem to json's createDictWith({{"title", theName}})			theItem's setkv("subtitle", "EXECUTE entry")			theItem's setkv("arg", "exec|" &amp; theID)			theItem's setkv("quicklookurl", "")						set theIcon to json's createDictWith({{"type", "image"}})			theIcon's setkv("path", "exec.png")			theItem's setkv("icon", theIcon)						-- no modifiers so far but leave it in case it will be required			-- Set Mod for CMD			set theDel to json's createDictWith({{"valid", "true"}})			theDel's setkv("arg", "del|" &amp; theID)			theDel's setkv("subtitle", "DELETE entry")						set theIcon to json's createDictWith({{"type", "image"}})			theIcon's setkv("path", "delete.png")			theDel's setkv("icon", theIcon)						set theMod to json's createDictWith({{"cmd", theDel}})						(*	-- Set Mod for ALT			set theDel to json's createDictWith({{"valid", "true"}})		theDel's setkv("arg", "del|" &amp; theID)		theDel's setkv("subtitle", "Delete rsync command")		theMod's setkv("alt", theDel)*)						theItem's setkv("mods", theMod)						-- Add JSON strucutre for Script Object Filter			set end of theItems to theItem		end repeat	end if		-- Create root items object and encode to JSON	set itemDict to json's createDict()	itemDict's setkv("items", theItems)		-- Return Script filter JSON	return json's encode(itemDict)	end run(* ================================================================
FUNTION: Splits a String with a given delimiter
RETURNS: List of String  (List)
==================================================================*)on StringSplit(theString, theDelimiter)	-- save delimiters to restore old settings	set oldDelimiters to AppleScript's text item delimiters	-- set delimiters to delimiter to be used	set AppleScript's text item delimiters to theDelimiter	-- create the array	set theArray to every text item of theString	-- restore the old setting	set AppleScript's text item delimiters to oldDelimiters	-- return the result	return theArrayend StringSplit</string>
				<key>scriptargtype</key>
				<integer>1</integer>
				<key>scriptfile</key>
				<string></string>
				<key>subtext</key>
				<string>Execute or add rsync configurations</string>
				<key>title</key>
				<string>Sync project folders via Rsync</string>
				<key>type</key>
				<integer>6</integer>
				<key>withspace</key>
				<true/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.input.scriptfilter</string>
			<key>uid</key>
			<string>7237410C-BEE0-45EC-9AA1-1FFDBB456611</string>
			<key>version</key>
			<integer>2</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>concurrently</key>
				<false/>
				<key>escaping</key>
				<integer>68</integer>
				<key>script</key>
				<string>on run argv	set theQuery to item 1 of argv	set {theAction, theIDtoAction} to StringSplit(theQuery, "|")		set theDataDir to POSIX file (do shell script "echo $alfred_workflow_data")		set theDataFile to theDataDir &amp; ":rsync.txt" as text	log "rsync path: " &amp; theDataFile		set theRawData to {}	try		set theRawData to paragraphs of (read file theDataFile)	on error		log "file empty"	end try		set theData to {}	repeat with theLine in theRawData		if (theLine as text) contains "|" then			set theData to theData &amp; theLine		end if	end repeat		-- DELETE Entry 	if theAction is equal to "del" then		tell application "System Events" to if (exists file theDataFile) then delete file theDataFile		--do shell script ("rm " &amp; "\"" &amp; (POSIX path of theDataFile) &amp; "\"")		repeat with theDataSet in theData			set theD to StringSplit(theDataSet, "|")			set theID to item 1 of theD			if theID is not equal to theIDtoAction then				set res to writeTextToFile(theDataSet, theDataFile, false)				log "File error: " &amp; res			end if		end repeat		tell application "Alfred 3" to run trigger ".rsedit" in workflow "com.apple.alfred.workflow.rsync" with argument ""		set theOutput to ""	end if		--- ADD Entry	if theAction is equal to "add" then		-- add folder path via choose file dialog		if theIDtoAction is equal to "0" then			tell application "System Events"				set theSource to (POSIX path of (choose folder with prompt "Select Source Folder"))				set theTarget to (POSIX path of (choose folder with prompt "Select Target Folder"))				set theName to text returned of (display dialog "Enter a title for the configuration?" default answer "")			end tell		else if theIDtoAction is equal to "1" then			tell application "System Events"				set theSource to text returned of (display dialog "Add Source Folder" default answer "")				set theTarget to text returned of (display dialog "Add Target Folder" default answer "")				set theName to text returned of (display dialog "Enter a title for the configuration?" default answer "")			end tell		end if		--do shell script ("rm " &amp; "\"" &amp; (POSIX path of theDataFile) &amp; "\"")		tell application "System Events" to if (exists file theDataFile) then delete file theDataFile		set theLastID to 0		if (count of theData) is greater than 0 then			set theLastLine to the last item of theData			set theLastItems to StringSplit(theLastLine, "|")			set theLastID to item 1 of theLastItems		end if				set theNewID to theLastID + 1		set theLastEntry to (theNewID &amp; "|" &amp; theName &amp; "|" &amp; theSource &amp; "|" &amp; theTarget) as text		set theData to theData &amp; theLastEntry				repeat with theDataSet in theData			set res to writeTextToFile(theDataSet, theDataFile, false)			log "File error: " &amp; res		end repeat						--set res to writeTextToFile(theLastEntry, theDataFile, false)		--log "File error (last): " &amp; res		tell application "Alfred 3" to run trigger ".rsedit" in workflow "com.apple.alfred.workflow.rsync" with argument ""		set theOutput to ""			end if		-- Execute	if theAction is equal to "exec" then		set theOutput to ""		repeat with theLine in theData			set theDataSet to StringSplit(theLine, "|")			set theID to item 1 of theDataSet						-- Execute if 0 (ALL) or individual ID			if (theIDtoAction is equal to "0") or (theIDtoAction is equal to theID) then				set theName to item 2 of theDataSet				set theSource to item 3 of theDataSet				set theTarget to item 4 of theDataSet								-- get ASCII code from last character of source path				set theLastCharacter to ASCII number of (characters -1 thru -1 of theSource)				log "Last char: " &amp; theLastCharacter								-- Add * if last character is "/"				if theLastCharacter is equal to 47 then					set theSource to theSource &amp; "*"				else if theLastCharacter is equal to 42 then					-- if / and * is missing add both				else					set theSource to theSource &amp; "/*"				end if								log "Sync: " &amp; theName &amp; " " &amp; theSource &amp; " &gt; " &amp; theTarget								set theRsyncCmd to "rsync -rtvuc --delete-after --ignore-errors " &amp; theSource &amp; " " &amp; theTarget &amp; " --stats | grep \"Number of files transferred\""								set theOutput to theOutput &amp; theName &amp; " - " &amp; (do shell script theRsyncCmd) &amp; "
"			end if		end repeat	end if		return theOutputend run(* ================================================================
FUNTION: Splits a String with a given delimiter
RETURNS: List of String  (List)
==================================================================*)on StringSplit(theString, theDelimiter)	-- save delimiters to restore old settings	set oldDelimiters to AppleScript's text item delimiters	-- set delimiters to delimiter to be used	set AppleScript's text item delimiters to theDelimiter	-- create the array	set theArray to every text item of theString	-- restore the old setting	set AppleScript's text item delimiters to oldDelimiters	-- return the result	return theArrayend StringSpliton writeTextToFile(theText, theFile, overwriteExistingContent)	try		-- Convert the file to a string		set theFile to theFile as string				-- Open the file for writing		set theOpenedFile to open for access file theFile with write permission				-- Clear the file if content should be overwritten		if overwriteExistingContent is true then set eof of theOpenedFile to 0				-- Write the new content to the file		write theText to theOpenedFile starting at eof		write linefeed to theOpenedFile starting at eof				-- Close the file		close access theOpenedFile				-- Return a boolean indicating that writing was successful		return true				-- Handle a write error	on error				-- Close the file		try			close access file theFile		end try				-- Return a boolean indicating that writing failed		return false	end tryend writeTextToFile</string>
				<key>scriptargtype</key>
				<integer>1</integer>
				<key>scriptfile</key>
				<string></string>
				<key>type</key>
				<integer>6</integer>
			</dict>
			<key>type</key>
			<string>alfred.workflow.action.script</string>
			<key>uid</key>
			<string>18A8BEB2-76E9-4C6B-9F76-B7C0952A20C3</string>
			<key>version</key>
			<integer>2</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>triggerid</key>
				<string>.rsedit</string>
			</dict>
			<key>type</key>
			<string>alfred.workflow.trigger.external</string>
			<key>uid</key>
			<string>466C9EDE-75DE-4BD9-9871-984499110A39</string>
			<key>version</key>
			<integer>1</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>inputstring</key>
				<string>{query}</string>
				<key>matchcasesensitive</key>
				<false/>
				<key>matchmode</key>
				<integer>1</integer>
				<key>matchstring</key>
				<string></string>
			</dict>
			<key>type</key>
			<string>alfred.workflow.utility.filter</string>
			<key>uid</key>
			<string>0B1EEDE7-0E14-4E4D-946B-0A080FD90ABA</string>
			<key>version</key>
			<integer>1</integer>
		</dict>
	</array>
	<key>readme</key>
	<string>Rsync Folders helps to keep a shadow folder in sync. 

Rsync shows two options:

1. Execute: Rsync configuration which runs all rsync entry from config
2. Rsync Configuration: allows to delete and add new entries</string>
	<key>uidata</key>
	<dict>
		<key>0B1EEDE7-0E14-4E4D-946B-0A080FD90ABA</key>
		<dict>
			<key>xpos</key>
			<integer>670</integer>
			<key>ypos</key>
			<integer>90</integer>
		</dict>
		<key>18A8BEB2-76E9-4C6B-9F76-B7C0952A20C3</key>
		<dict>
			<key>xpos</key>
			<integer>500</integer>
			<key>ypos</key>
			<integer>60</integer>
		</dict>
		<key>466C9EDE-75DE-4BD9-9871-984499110A39</key>
		<dict>
			<key>xpos</key>
			<integer>50</integer>
			<key>ypos</key>
			<integer>60</integer>
		</dict>
		<key>7237410C-BEE0-45EC-9AA1-1FFDBB456611</key>
		<dict>
			<key>xpos</key>
			<integer>270</integer>
			<key>ypos</key>
			<integer>60</integer>
		</dict>
		<key>8EDB9386-2EB1-47FB-8905-FD1B868A2066</key>
		<dict>
			<key>xpos</key>
			<integer>760</integer>
			<key>ypos</key>
			<integer>60</integer>
		</dict>
	</dict>
	<key>version</key>
	<string>1.1</string>
	<key>webaddress</key>
	<string>https://github.com/Acidham/rsync-folders</string>
</dict>
</plist>
